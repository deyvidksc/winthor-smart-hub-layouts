name: "CI/CD - Atualizar Version.json"

on:
  workflow_run:
    workflows: ["CI/CD - Criar Tag de Release"]
    types:
       - completed
       - success

permissions:
  contents: write  # Permite ao GITHUB_TOKEN fazer push para o repositório

jobs:
  update-version-json:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Carregar a versão atual
        run: |
          # A versão será passada como variável de ambiente do workflow anterior
          echo "NEW_VERSION=${{ github.event.workflow_run.outputs.NEW_VERSION }}" >> $GITHUB_ENV
          # Imprimir para depuração
          echo "Versão recebida do workflow anterior: ${{ github.event.workflow_run.outputs.NEW_VERSION }}"

      - name: Verificar o status do repositório
        run: |
          # Verifica o status e as alterações atuais do repositório
          git status
          git log --oneline --decorate -n 5

      - name: Buscar arquivos modificados entre o PR e o main
        id: modified_files
        run: |
          # Nome do branch do PR
          PR_BRANCH="${{ github.event.workflow_run.head_ref }}"
          
          # Atualiza o branch main com as últimas alterações remotas
          git fetch origin main  # Atualiza o main local com o remoto

          # Verifica as alterações entre o branch do PR e o branch main
          git diff --name-only origin/main...$PR_BRANCH > changed_files.txt
          
          # Debug: Exibe os arquivos modificados
          echo "Arquivos modificados entre o PR e main:"
          cat changed_files.txt
          
          # Confirma se a comparação encontrou algo
          if [ ! -s changed_files.txt ]; then
            echo "Nenhum arquivo modificado encontrado entre o PR e o main."
            exit 1  # Falha o workflow se não houver alterações
          fi

      - name: Imprimir pastas modificadas
        run: |
          # A versão obtida do workflow anterior será utilizada para atualizar o version.json
          NEW_VERSION="${{ env.NEW_VERSION }}"
          MODIFIED_FOLDERS=$(grep -oP '^[^/]+(?=/)' changed_files.txt | sort -u)

          # Imprimir as pastas modificadas
          echo "Pastas modificadas:"
          echo "$MODIFIED_FOLDERS"

      - name: Atualizar version.json nas pastas modificadas
        run: |
          # A versão obtida do workflow anterior será utilizada para atualizar o version.json
          NEW_VERSION="${{ env.NEW_VERSION }}"
          MODIFIED_FOLDERS=$(grep -oP '^[^/]+(?=/)' changed_files.txt | sort -u)

          for folder in $MODIFIED_FOLDERS; do
            # Ignorar as pastas não desejadas
            if [[ "$folder" == ".github" || "$folder" == "version-control" || "$folder" == ".github" ]]; then
              continue
            fi

            # Verifica se existe um arquivo version.json dentro da pasta
            VERSION_JSON_PATH="$folder/version.json"
            if [[ -f "$VERSION_JSON_PATH" ]]; then
              echo "Atualizando $VERSION_JSON_PATH com a versão $NEW_VERSION"
              # Atualiza a versão dentro do version.json
              jq ".versao = \"$NEW_VERSION\"" $VERSION_JSON_PATH > temp_version.json && mv temp_version.json $VERSION_JSON_PATH
              git add $VERSION_JSON_PATH
            else
              echo "Arquivo version.json não encontrado em $folder"
            fi
          done

      - name: Commit e Push das alterações no version.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Fazer pull para integrar as mudanças do repositório remoto
          git pull origin ${{ github.ref }} --rebase

          # Verifica se há alterações para commitar
          git diff --exit-code || git commit -m "Atualizando version.json para versão ${{ env.NEW_VERSION }}"

          # Push se houver alterações com o GITHUB_TOKEN
          git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }} ${{ github.ref }} || echo "Nenhuma alteração para push"
