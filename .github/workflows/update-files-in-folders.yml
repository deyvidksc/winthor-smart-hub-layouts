# name: "CI/CD - Atualizar Version.json"

# on:
#   workflow_run:
#     workflows: ["CI/CD - Criar Tag de Release"]
#     types:
#        - completed
#        - success

# permissions:
#   contents: write  # Permite ao GITHUB_TOKEN fazer push para o repositório

# jobs:
#   update-version-json:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out Git repository
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Isso garante que você tenha o histórico completo para comparar as branches

#       - name: Print remote branch for PR (from git remote show origin)
#         run: |
#           # Obtém o nome da branch de origem do PR (head_ref)
#           PR_BRANCH="${{ github.head_ref }}"
          
#           # Exibe as informações do repositório remoto
#           echo "Informações sobre o repositório remoto (git remote show origin):"
#           git remote show origin

#           # Filtra o nome da branch de origem do PR
#           echo "Branch de origem do PR (exemplo 'estudo_versoes')"
#           git remote show origin | grep -oP '.*\s*pushes\s*to\s*\K\w+' | grep "$PR_BRANCH"


name: "CI/CD - Atualizar Version.json"

on:
  push:
    branches:
      - main
      - develop  # ou outras branches que você deseja monitorar para executar o JAR

permissions:
  contents: read  # Permite ao GITHUB_TOKEN acessar o conteúdo do repositório

jobs:
  run-jar:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Garantir que você tem o histórico completo, se necessário

      - name: Instalar Java
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-11-jdk -y  # ou qualquer versão necessária

      - name: Verificar a instalação do Java
        run: |
          java -version

      - name: Obter o nome da branch trunk
        id: get_branch_trunk
        run: |
          # Pega o nome da branch atual (geralmente main ou develop)
          BRANCH_TRUNK=$(git rev-parse --abbrev-ref HEAD)
          echo "Branch trunk: $BRANCH_TRUNK"
          echo "BRANCH_TRUNK=$BRANCH_TRUNK" >> $GITHUB_ENV

      - name: Obter o nome da branch remota (origin)
        id: get_branch_origin
        run: |
          # Pega o nome da branch remota que está sendo usada no PR
          BRANCH_ORIGIN=${GITHUB_REF#refs/heads/}
          echo "Branch origin: $BRANCH_ORIGIN"
          echo "BRANCH_ORIGIN=$BRANCH_ORIGIN" >> $GITHUB_ENV

      - name: Executar JAR com parâmetros
        run: |
          # Caminho para o arquivo JAR
          echo "Executando JAR com os parâmetros: Branch Trunk=${{ env.BRANCH_TRUNK }}, Branch Origin=${{ env.BRANCH_ORIGIN }}, Token=${{ secrets.GITHUB_TOKEN }}"
          # java -jar version-control/version-control-layouts.jar ${{ env.BRANCH_TRUNK }} ${{ env.BRANCH_ORIGIN }} ${{ secrets.GITHUB_TOKEN }}
          java -jar version-control/version-control-layouts.jar ${{ env.BRANCH_TRUNK }} estudo_versoes ${{ secrets.GITHUB_TOKEN }}

 
